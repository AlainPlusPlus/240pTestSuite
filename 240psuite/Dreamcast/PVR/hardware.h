/* 
 * 240p Test Suite
 * Copyright (C)2011-2022 Artemio Urbina
 *
 * This file is part of the 240p Test Suite
 *
 * The 240p Test Suite is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * The 240p Test Suite is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with 240p Test Suite; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef HARDWARE_H
#define HARDWARE_H

/*
	From MAME: dccons.cpp 
	
	note: Dreamcast Flash ROMs actually 256KB MBM29F002TC (5v/VA0) or MBM29LV002TC (3.3v/VA1) devices, only 2nd 128KB half is used, A17 pin tied to VCC
	sector SA5 (1A000 - 1BFFF) is read-only, contain information written during manufacture or repair, fully generated by software tool (except predefined list of creators)
*/
typedef struct factory_sector{
    struct factory_record {
        // everything 'char' below is decimal numbers in ASCII, unless noted else
        char machine_code1; // '0' - Dreamcast, 0xFF - dev.box
        char machine_code2; // '0' - Dreamcast, 0xFF - dev.box
        char country_code;  // 0 - Japan, 1 - America, 2 - Europe
        char language;      // 0 - Japanese, 1 - English, etc
        char broadcast_format;  // 0 - NTSC, 1 - PAL, 2 - PAL-M, 3 - PAL-N
        char machine_name[32];  // ASCII text 'Dreamcast', trail is 0x20 filled
        char tool_number[4];    // software tool #
        char tool_version[2];   // software tool version
        char tool_type[2];  // software tool type: 0 - for MP(mass production?), 1 - for Repair, 2 - for PP
        char year[4];
        char month[2];
        char day[2];
        char hour[2];
        char min[2];
        char serial_number[8];
        char factory_code[4];
        char total_number[16];
        uint8_t sum;        // byte sum of above
        struct {
            uint8_t sum_inv;    // ~(UID byte sum)
            uint8_t sum;        // UID byte sum
            uint8_t id[6];      // UID
        } machine_id;
        uint8_t machine_type;   // FF - Dreamcast
        uint8_t machine_version;// FF - VA0, FE - VA1, FD - VA2, NOTE: present in 1st factory record only, in 2nd always FF
        uint8_t unused[0x40];    // FF filled
    } factory_records[2];       // 2 copies
    uint8_t unused_0[0x36];     // FF filled
    uint8_t unk_version;        // not clear if hardware or bios version, A0 - VA0, 9F - VA1, 9E - VA2
    uint8_t unused_1[9];        // FF filled
    char staff_roll[0xca0];     // list of creators
    uint8_t unused_2[0x420];    // FF filled
    uint8_t random[0xdc0];      // output of RNG {static u32 seed; seed=(seed*0x83d+0x2439)&0x7fff; return (u16)(seed+0xc000);}, where initial seed value is serial_number[7] & 0xf
} flash_data;

typedef struct factory_sector_zeroed
{
	struct factory_record_zeroed {
        char machine_name[33];  // ASCII text 'Dreamcast', trail is 0x20 filled
        char tool_number[5];    // software tool #
        char tool_version[3];   // software tool version
        char tool_type[3];  // software tool type: 0 - for MP(mass production?), 1 - for Repair, 2 - for PP
        char year[5];
        char month[3];
        char day[3];
        char hour[3];
        char min[3];
        char serial_number[9];
        char factory_code[5];
        char total_number[17];
    } factory_records[2];       // 2 copies
    char staff_roll[0xc81];     // list of creators
} flash_data_p;

void ControllerTest();
void ListMapleDevices();
void MemoryViewer(uint32 address);
void VMUControllerTest();
int isLightGunPresent();
void LightGunTest();
void MicrophoneTest();
void ShowBIOSandFlash();

char *get_flash_region_str(int ver);
char *get_flash_language_str(int ver);
char *get_flash_broadcast_str(int ver);

int flashrom_get_region_data(int ver);
int flashrom_get_language(int ver);
int flashrom_get_broadcast(int ver);

void Show_ISP_Data();

int check_for_bad_lcd();

#define FLASHROM_CACHE_SIZE			6

#define FLASHROM_BROADCAST_NTSC		1
#define FLASHROM_BROADCAST_PAL		2
#define FLASHROM_BROADCAST_PALM		3
#define FLASHROM_BROADCAST_PALN		4
#define FLASHROM_BROADCAST_UNKNOWN	0

#define FLASHROM_LANGUAGE_JAPAN		1
#define FLASHROM_LANGUAGE_ENGLISH	2
#define FLASHROM_LANGUAGE_GERMAN	3
#define FLASHROM_LANGUAGE_FRENCH	4
#define FLASHROM_LANGUAGE_SPANISH	5
#define FLASHROM_LANGUAGE_ITALIAN	6
#define FLASHROM_LANGUAGE_UNKNOWN	0

// Redefined from KOS, seems those are wrong or I don't know how to use them

// 0-7 empty?

#define 	CONT_FIXED_CAPABILITY_RTRIG   		(1<<8)
#define 	CONT_FIXED_CAPABILITY_LTRIG   		(1<<9)
#define 	CONT_FIXED_CAPABILITY_ANALOG_X   	(1<<10)
#define 	CONT_FIXED_CAPABILITY_ANALOG_Y   	(1<<11)

#define 	CONT_FIXED_CAPABILITY_ANALOG2_X   	(1<<12)
#define 	CONT_FIXED_CAPABILITY_ANALOG2_Y   	(1<<13)

// 14 & 15? Might be two other triggers?

#define 	CONT_FIXED_CAPABILITY_Z   			(1<<16)
#define 	CONT_FIXED_CAPABILITY_Y   			(1<<17)
#define 	CONT_FIXED_CAPABILITY_X   			(1<<18)
#define 	CONT_FIXED_CAPABILITY_D   			(1<<19)

#define 	CONT_FIXED_CAPABILITY_DPAD2_UP   	(1<<20)
#define 	CONT_FIXED_CAPABILITY_DPAD2_DOWN   	(1<<21)
#define 	CONT_FIXED_CAPABILITY_DPAD2_LEFT   	(1<<22)
#define 	CONT_FIXED_CAPABILITY_DPAD2_RIGHT   (1<<23)


#define 	CONT_FIXED_CAPABILITY_C   			(1<<24)
#define 	CONT_FIXED_CAPABILITY_B   			(1<<25)
#define 	CONT_FIXED_CAPABILITY_A   			(1<<26)
#define 	CONT_FIXED_CAPABILITY_START   		(1<<27)

#define 	CONT_FIXED_CAPABILITY_DPAD_UP   	(1<<28)
#define 	CONT_FIXED_CAPABILITY_DPAD_DOWN   	(1<<29)
#define 	CONT_FIXED_CAPABILITY_DPAD_LEFT   	(1<<30)
#define 	CONT_FIXED_CAPABILITY_DPAD_RIGHT   	(1<<31)

#endif

